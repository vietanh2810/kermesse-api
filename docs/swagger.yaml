definitions:
  domain.ChatMessage:
    properties:
      id:
        type: integer
      kermesse_id:
        type: integer
      message:
        type: string
      receiver_id:
        type: integer
      sender_id:
        type: integer
      stand_id:
        type: integer
      timestamp:
        type: string
    type: object
  domain.Kermesse:
    properties:
      createdAt:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      organizers:
        items:
          $ref: '#/definitions/domain.Organizer'
        type: array
      participants:
        items:
          $ref: '#/definitions/domain.User'
        type: array
      stands:
        items:
          $ref: '#/definitions/domain.Stand'
        type: array
      tokensSold:
        type: integer
      updatedAt:
        type: string
    type: object
  domain.Organizer:
    properties:
      organizedKermesses:
        items:
          $ref: '#/definitions/domain.Kermesse'
        type: array
      user:
        $ref: '#/definitions/domain.User'
      userID:
        type: integer
    type: object
  domain.Stand:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      kermesse:
        $ref: '#/definitions/domain.Kermesse'
      kermesseID:
        type: integer
      name:
        type: string
      pointsGiven:
        description: Only for activity stands
        type: integer
      stock:
        items:
          $ref: '#/definitions/domain.Stock'
        type: array
      tokensSpent:
        type: integer
      type:
        description: '"food", "drink", or "activity"'
        type: string
      updatedAt:
        type: string
    type: object
  domain.Stock:
    properties:
      id:
        type: integer
      itemName:
        type: string
      quantity:
        type: integer
      standID:
        type: integer
      tokenCost:
        description: Cost in tokens
        type: integer
    type: object
  domain.TokenTransaction:
    properties:
      amount:
        type: integer
      createdAt:
        type: string
      fromID:
        type: integer
      fromType:
        type: string
      id:
        type: integer
      kermesseID:
        type: integer
      standID:
        type: integer
      status:
        type: string
      toID:
        type: integer
      toType:
        type: string
      type:
        $ref: '#/definitions/domain.TokenTransactionType'
      updatedAt:
        type: string
    type: object
  domain.TokenTransactionType:
    enum:
    - Purchase
    - Distribution
    - Spend
    type: string
    x-enum-varnames:
    - TokenPurchase
    - TokenDistribution
    - TokenSpend
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  request.AttributePointsRequest:
    properties:
      points:
        minimum: 1
        type: integer
      student_id:
        type: integer
    required:
    - points
    - student_id
    type: object
  request.CreateKermesseRequest:
    properties:
      date:
        format: DD/MM/YYYY
        type: string
      description:
        type: string
      location:
        type: string
      name:
        type: string
    required:
    - date
    - location
    - name
    type: object
  request.CreateStandRequest:
    properties:
      description:
        type: string
      name:
        type: string
      stock:
        items:
          $ref: '#/definitions/request.StockItem'
        type: array
      type:
        type: string
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.SendTokensRequest:
    properties:
      amount:
        minimum: 1
        type: integer
      student_id:
        type: integer
    required:
    - amount
    - student_id
    type: object
  request.SignupRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      student_emails:
        description: |-
          Parent-specific field
          StudentEmail string `json:"student_email,omitempty"`
        items:
          type: string
        type: array
    type: object
  request.StandPurchaseRequest:
    properties:
      itemName:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - itemName
    - quantity
    type: object
  request.StandTransactionApprovalRequest:
    properties:
      approved:
        type: boolean
      itemName:
        type: string
      quantity:
        minimum: 1
        type: integer
      transaction_id:
        type: integer
    required:
    - approved
    - itemName
    - quantity
    - transaction_id
    type: object
  request.StockItem:
    properties:
      item_name:
        type: string
      quantity:
        type: integer
      token_cost:
        type: integer
    type: object
  request.StockUpdateRequest:
    properties:
      item_name:
        type: string
      quantity:
        type: integer
      stock_id:
        type: integer
      token_cost:
        type: integer
    type: object
  request.TokenPurchaseRequest:
    properties:
      amount:
        minimum: 1
        type: integer
      stripe_token:
        type: string
    required:
    - amount
    - stripe_token
    type: object
  response.Err:
    properties:
      error:
        description: user-facing error message
        type: string
      error_code:
        description: application-specific error code
        type: integer
    type: object
  response.PointsAttributionResponse:
    properties:
      message:
        type: string
      points_attributed:
        type: integer
      student_id:
        type: integer
      total_points:
        type: integer
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /auth/login:
    post:
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      summary: Login a user
      tags:
      - auth
  /auth/signup:
    post:
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      summary: Signup a new user
      tags:
      - auth
  /kermesses:
    get:
      description: Retrieves all kermesses associated with the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Kermesse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Get kermesses for user
      tags:
      - kermesses
    post:
      consumes:
      - application/json
      description: Creates a new kermesse event. Only users with the "organizer" role
        can create kermesses.
      parameters:
      - description: Kermesse details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateKermesseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Kermesse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Create a new kermesse
      tags:
      - kermesses
  /kermesses/{kermesseID}/children_transactions:
    get:
      description: Retrieves all transactions made by the children of the authenticated
        parent user for a specific kermesse. Only parents can access this endpoint.
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.TokenTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Get children's transactions for a kermesse
      tags:
      - kermesses
      - transactions
  /kermesses/{kermesseID}/participate:
    get:
      description: Adds the authenticated user as a participant to the specified kermesse
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Participate in a kermesse
      tags:
      - kermesses
  /kermesses/{kermesseID}/stand:
    get:
      description: Retrieves all stands for a specific kermesse. The user must be
        a participant, organizer, or stand holder associated with the kermesse to
        access this information.
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Stand'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Get stands for a kermesse
      tags:
      - kermesses
      - stands
    post:
      consumes:
      - application/json
      description: Creates a new stand for a specific kermesse. Only organizers, admins,
        or stand holders can perform this action.
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Stand details
        in: body
        name: stand
        required: true
        schema:
          $ref: '#/definitions/request.CreateStandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Stand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Create a new stand for a kermesse
      tags:
      - kermesses
      - stands
  /kermesses/{kermesseID}/stand/{standID}/purchase:
    post:
      consumes:
      - application/json
      description: Allows a user to make a purchase from a stand in a kermesse
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Stand ID
        in: path
        name: standID
        required: true
        type: integer
      - description: Purchase request
        in: body
        name: purchaseRequest
        required: true
        schema:
          $ref: '#/definitions/request.StandPurchaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      summary: Make a purchase from a stand
      tags:
      - kermesses
  /kermesses/{kermesseID}/stand/{standID}/stock/update:
    post:
      consumes:
      - application/json
      description: Allows updating the stock for items in a stand
      parameters:
      - description: Stand ID
        in: path
        name: standID
        required: true
        type: integer
      - description: Stock update request
        in: body
        name: stockUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/request.StockUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      summary: Update stock for a stand
      tags:
      - kermesses
  /kermesses/{kermesseID}/stands/{standID}/attribute-points:
    post:
      consumes:
      - application/json
      description: Allows a stand holder to attribute points to a student for participating
        in an activity
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Stand ID
        in: path
        name: standID
        required: true
        type: integer
      - description: Points attribution request
        in: body
        name: attributePointsRequest
        required: true
        schema:
          $ref: '#/definitions/request.AttributePointsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PointsAttributionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Attribute points to a student
      tags:
      - kermesses
      - stands
      - students
  /kermesses/{kermesseID}/stands/{standID}/chat:
    get:
      description: Establishes a WebSocket connection for real-time chat between organizers
        and stand holders
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Stand ID
        in: path
        name: standID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols to WebSocket
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Establish WebSocket connection for chat
      tags:
      - kermesses
      - chat
  /kermesses/{kermesseID}/stands/{standID}/messages:
    get:
      description: Retrieves chat messages for a specific kermesse and stand
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Stand ID
        in: path
        name: standID
        required: true
        type: integer
      - description: Number of messages to retrieve (default 50)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ChatMessage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Get chat messages
      tags:
      - kermesses
      - chat
  /kermesses/{kermesseID}/token/purchase:
    post:
      consumes:
      - application/json
      description: Allows a parent to purchase tokens for a specific kermesse. Only
        parents who are participating in the kermesse can perform this action.
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Token purchase details
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/request.TokenPurchaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.TokenTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      security:
      - BearerAuth: []
      summary: Purchase tokens for a kermesse
      tags:
      - kermesses
      - tokens
  /kermesses/{kermesseID}/token/transferToChild:
    post:
      consumes:
      - application/json
      description: Allows a parent to send tokens to their child
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Send tokens request
        in: body
        name: sendTokensRequest
        required: true
        schema:
          $ref: '#/definitions/request.SendTokensRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      summary: Send tokens from parent to child
      tags:
      - kermesses
  /kermesses/{kermesseID}/transaction/{transactionID}:
    post:
      consumes:
      - application/json
      description: Allows a stand holder to validate a purchase transaction
      parameters:
      - description: Kermesse ID
        in: path
        name: kermesseID
        required: true
        type: integer
      - description: Transaction ID
        in: path
        name: transactionID
        required: true
        type: integer
      - description: Approval request
        in: body
        name: approvalRequest
        required: true
        schema:
          $ref: '#/definitions/request.StandTransactionApprovalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Err'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Err'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      summary: Validate a purchase transaction
      tags:
      - kermesses
  /users/{userID}:
    get:
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Err'
      summary: Get a user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Bearer token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
